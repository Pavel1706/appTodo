{"version":3,"sources":["serviceWorker.ts","API/todolists-api.ts","features/TodolistsList/todolists-reducer.ts","components/AddItem/AddItem.tsx","components/EditableSpan/ChangeInput.tsx","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","initialState","AddItem","React","memo","props","console","log","useState","setTitle","error","setError","addTask","newTitle","trim","addItem","TextField","value","variant","label","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","color","ControlPoint","ChangeInput","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","apiModel","description","status","priority","startDate","deadline","then","res","action","type","updateTaskAC","warn","Task","useDispatch","onClickHandler","useCallback","removeTaskAC","onChangeHandler","newIsDoneValue","checked","Completed","New","changename","className","Checkbox","Delete","Todolist","useSelector","state","useEffect","data","items","setTasksAC","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","TodoName","changeNameTodo","allTodolistTasks","tasksForTodolist","filter","item","addTaskTC","removeTodolist","map","Button","TodolistsList","todolist","setTodolistAC","todolists","removeTodolistAC","Newtitle","addTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","Grid","container","style","padding","spacing","tl","Paper","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","rootReducer","combineReducers","todoListId","stateCopy","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cbf340fc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fae6bcdf-1b7b-4b5f-8f9c-eecd7cb26aa8'\r\n    }\r\n\r\n})\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title})\r\n    },\r\n    getTasks(todolistId:string){\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId:string,taskId:string){\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(title: string,todolistId:string){\r\n      return instance.post<{title:string}, AxiosResponse<ResponseType<{item:TaskType}>>>(`todo-lists/${todolistId}/tasks`,{title})\r\n    },\r\n    updateTask(todolistId:string, taskId: string,model: UpdateTaskModelType){\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n","import {todolistsAPI, TodolistType} from \"../../API/todolists-api\";\r\nimport { Dispatch } from \"redux\";\r\n\r\n\r\nconst initialState:Array<TodolistDomainType> = []\r\n\r\n\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType>= initialState, action: AllActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'SET-TODOLISTS':\r\n            return action.todolist.map(tl=>({ ...tl, filter: 'all'}))\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(t => t.id !== action.todolistId)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter:'all'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl=>tl.id===action.id ? {...tl, title:action.newTitle}:tl)\r\n        case'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl=>tl.id===action.todolistId ? {...tl, filter:action.value}:tl)\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n         todolistId\r\n    } as const\r\n}\r\nexport const addTodolistAC = (todolist:TodolistType) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        todolist\r\n    } as const\r\n}\r\nexport const changeTodolistTitleAC = (id: string, newTitle: string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        newTitle: newTitle,\r\n        id: id\r\n    } as const\r\n}\r\nexport const changeTodolistFilterAC = (id: string,filter: FilterValuesType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        todolistId: id,\r\n        value: filter\r\n    } as const\r\n}\r\nexport const setTodolistAC = (todolist: Array<TodolistType>)=>{\r\n    return {\r\n        type: 'SET-TODOLISTS',\r\n        todolist:todolist,\r\n    } as const\r\n}\r\n\r\n\r\n\r\nexport const getTodolistsTC=()=>(dispatch:Dispatch<AllActionType>)=>{\r\n    todolistsAPI.getTodolists()\r\n        .then ((res)=> {\r\n            let todolist = res.data\r\n            dispatch(setTodolistAC(todolist))\r\n        } )\r\n    }\r\nexport const createTodolistsTC=(title:string)=>(dispatch:Dispatch<AllActionType>)=>{\r\n    todolistsAPI.createTodolist(title)\r\n        .then ((res)=> {\r\n            let todolist = res.data.data.item\r\n            dispatch(addTodolistAC(todolist))\r\n        } )\r\n}\r\nexport const deleteTodolistTC=(todolistId:string)=>(dispatch:Dispatch<AllActionType>)=>{\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then (()=> {\r\n            dispatch(removeTodolistAC(todolistId))\r\n        } )\r\n}\r\nexport const changeTodolistTitleTC=(id:string,title:string)=>(dispatch:Dispatch<AllActionType>)=>{\r\n    todolistsAPI.updateTodolist(id,title)\r\n        .then ((res)=> {\r\n            dispatch(changeTodolistTitleAC(id,title))\r\n        } )\r\n}\r\n\r\n\r\nexport type AddTodolistType=ReturnType<typeof addTodolistAC>\r\nexport type removeTodolistType=ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistType=ReturnType<typeof setTodolistAC>\r\n\r\nexport type AllActionType =\r\n    ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof setTodolistAC>\r\n\r\n\r\ntype FilterValuesType = 'all' | 'completed' | 'active'\r\nexport type TodolistDomainType= TodolistType & {\r\n    filter: FilterValuesType\r\n}","import { IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint} from \"@material-ui/icons\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\n\r\ntype AddItemType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItem = React.memo((props: AddItemType) => {\r\n    console.log('addItem is called')\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const addTask = () => {\r\n        let newTitle = title.trim();\r\n        if (newTitle !== \"\") {\r\n            props.addItem(newTitle);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n\r\n    return <div>\r\n        <TextField value={title}\r\n                   variant={'outlined'}\r\n                   label={'Type value'}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   helperText={error}\r\n        />\r\n        <IconButton onClick={addTask} color={'primary'}>\r\n            <ControlPoint/>\r\n        </IconButton>\r\n\r\n    </div>\r\n})\r\n","import TextField from '@material-ui/core/TextField';\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype changeInputType={\r\n    title:string\r\n    onChange:(newTitle:string)=> void\r\n}\r\n\r\n\r\n\r\nexport const ChangeInput = React.memo( function (props:changeInputType){\r\n    console.log('input changed')\r\n    let [editMode, setEditMode]=useState(false)\r\n    let [title, setTitle]=useState(props.title)\r\n\r\n    function Active(){\r\n        setEditMode(true)\r\n        // setTitle(title)\r\n    }\r\n    function View(){\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    function change(e: ChangeEvent<HTMLInputElement>){\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    function EnterInput(e:KeyboardEvent<HTMLInputElement>){\r\n        console.log(e.charCode)\r\n        if(e.charCode===13) {\r\n            // View()\r\n            setEditMode(false)\r\n            props.onChange(title)\r\n        }\r\n    }\r\n\r\n\r\n    return  editMode\r\n        ?  <TextField value={title} onBlur={View} onChange={change}\r\n                  onKeyPress={EnterInput} autoFocus/>\r\n        : <span onDoubleClick={Active}>{props.title}</span>\r\n})","import { Dispatch } from \"redux\";\r\nimport {TasksStateType} from \"../../app/App\";\r\nimport {AddTodolistType, removeTodolistType, setTodolistAC, SetTodolistType} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from \"../../API/todolists-api\";\r\nimport {AppRootState} from \"../../app/store\";\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: AllTasksReducerType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id != action.id)\r\n            }\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                    [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return{...state,[action.todolistId]:state[action.todolistId]\r\n                    .map(t=>t.id===action.id ? {...t,  ...action.model} : t) }\r\n        case 'ADD-TODOLIST':\r\n           return { ...state,[action.todolist.id] : []  }\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.todolistId]\r\n            return stateCopy\r\n        }\r\n        case \"SET-TODOLISTS\":\r\n            const stateCopy = {...state}\r\n            action.todolist.forEach(t=>{\r\n                stateCopy[t.id]=[]\r\n            })\r\n            return stateCopy\r\n        case \"SET-TASKS\":\r\n            return {...state,[action.todolistId]:action.tasks }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (todolistId: string, taskId: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        id: taskId,\r\n        todolistId: todolistId\r\n    } as const\r\n}\r\nexport const addTaskAC = (task:TaskType) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        task:task,\r\n    } as const\r\n}\r\nexport const updateTaskAC = (id: string, model: UpdateDomainTaskModelType, todolistId: string) => {\r\n    return {\r\n        type: 'UPDATE-TASK',\r\n        id: id,\r\n        model: model,\r\n        todolistId: todolistId\r\n    } as const\r\n}\r\nexport const setTasksAC = (tasks:Array<TaskType>, todolistId:string)=>{\r\n    return {\r\n        type:'SET-TASKS',\r\n        tasks:tasks,\r\n        todolistId:todolistId\r\n    } as const\r\n}\r\n\r\n\r\n\r\nexport const getTasksTC=(todolistId:string)=>(dispatch: Dispatch<AllTasksReducerType>)=> {\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            let tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n        })\r\n}\r\nexport const deleteTaskTC=(todolistId:string, taskId:string)=>(dispatch:Dispatch<AllTasksReducerType>)=> {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(todolistId, taskId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC=(title:string,todolistId:string)=>(dispatch:Dispatch<AllTasksReducerType>)=> {\r\n    todolistsAPI.createTask(title, todolistId)\r\n        .then(res => {\r\n            const task = res.data.data.item\r\n            const action = addTaskAC(task)\r\n            dispatch(action)\r\n        })\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n\r\n\r\nexport const updateTaskTC=(taskId:string, domainModel:UpdateDomainTaskModelType, todolistId:string)=>\r\n    (dispatch:Dispatch<AllTasksReducerType>,getState:()=>AppRootState)=>{\r\n    const state = getState();\r\n    const task = state.tasks[todolistId].find(t=>t.id===taskId)\r\n        if(!task){\r\n            console.warn('task not found in the state')\r\n            return;\r\n        }\r\n    const apiModel:UpdateTaskModelType={\r\n        title: task.title,\r\n        description: task.description,\r\n        status: task.status,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        deadline: task.deadline,\r\n        ...domainModel,\r\n    }\r\n    return todolistsAPI.updateTask(todolistId,taskId,apiModel)\r\n        .then(res=>{\r\n            const action = updateTaskAC(taskId,domainModel,todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\n\r\ntype AllTasksReducerType =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistType\r\n    | removeTodolistType\r\n    | SetTodolistType\r\n    |ReturnType<typeof setTasksAC>","import {deleteTaskTC, updateTaskTC} from \"../../tasks-reducer\";\r\nimport {ChangeInput} from \"../../../../components/EditableSpan/ChangeInput\";\r\n\r\nimport {useDispatch} from \"react-redux\";\r\nimport React, {ChangeEvent, useCallback} from 'react';\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../API/todolists-api\";\r\n\r\ntype TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch();\r\n    const onClickHandler = useCallback(() => dispatch(deleteTaskTC(props.todolistId, props.task.id)), [])\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        dispatch(updateTaskTC(props.task.id,{status:newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New } , props.todolistId))\r\n    }, [])\r\n\r\n    const changename = useCallback((newTitle: string) => {\r\n        dispatch(updateTaskTC(props.task.id, {title:newTitle}, props.todolistId))\r\n    }, [])\r\n\r\n    return <div key={props.task.id} className={props.task.status===TaskStatuses.Completed ? 'is-done' : \"\"}>\r\n        <Checkbox onChange={onChangeHandler} checked={props.task.status === TaskStatuses.Completed}/>\r\n        <ChangeInput title={props.task.title} onChange={changename}/>\r\n\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n\r\n})","import {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport React, {useCallback, useEffect} from 'react';\r\nimport {AddItem} from '../../../components/AddItem/AddItem';\r\nimport {FilterValuesType} from '../../../app/App';\r\nimport {ChangeInput} from '../../../components/EditableSpan/ChangeInput';\r\nimport {AppRootState} from \"../../../app/store\";\r\nimport { addTaskTC, getTasksTC} from \"../tasks-reducer\";\r\n\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport {TaskStatuses, TaskType} from \"../../../API/todolists-api\";\r\n\r\nimport {Task} from \"./Task/Task\";\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    changeFilter: (todolistId: string, value: FilterValuesType) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    changeNameTodo: (newTitle: string, id: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log('todolist is called')\r\n\r\n    const tasks = useSelector<AppRootState, Array<TaskType>>(state => state.tasks[props.id])\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=> {\r\n        dispatch(getTasksTC(props.id))\r\n\r\n    },[])\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(props.id, \"all\"),[props.changeFilter,props.id]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(props.id, \"active\"),[props.changeFilter,props.id]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(props.id, \"completed\"),[props.changeFilter,props.id]);\r\n\r\n    const TodoName=useCallback((newTitle: string)=> {\r\n        props.changeNameTodo( props.id, newTitle)\r\n    },[props.id,props.changeNameTodo])\r\n\r\n    let allTodolistTasks = tasks;\r\n    let tasksForTodolist = allTodolistTasks;\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = allTodolistTasks.filter(t => t.status===TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = allTodolistTasks.filter(t => t.status===TaskStatuses.Completed);\r\n    }\r\n    const addTask=useCallback((title:string)=>{\r\n            dispatch(addTaskTC(title, props.id))\r\n    }, [dispatch])\r\n\r\n    return <div>\r\n        <h3><ChangeInput title={props.title} onChange={TodoName}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItem addItem={addTask}/>\r\n        <ul>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    key={t.id}\r\n                    task={t}\r\n                todolistId={props.id}/>)\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? \"contained\" : \"text\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button color={'primary'} variant={props.filter === 'active' ? \"contained\" : \"text\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button color={'secondary'} variant={props.filter === 'completed' ? \"contained\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {\r\n    changeTodolistFilterAC, changeTodolistTitleTC,\r\n    createTodolistsTC,\r\n    deleteTodolistTC,\r\n    getTodolistsTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootState} from \"../../app/store\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItem} from \"../../components/AddItem/AddItem\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {FilterValuesType} from \"../../app/App\";\r\n\r\ntype TodolistsListType ={\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const TodolistsList: React.FC<TodolistsListType>=(props)=> {\r\n\r\n    useEffect(()=> {\r\n        dispatch(getTodolistsTC())\r\n\r\n    },[])\r\n\r\n    console.log('app is called')\r\n    const dispatch = useDispatch();\r\n    const todolists = useSelector<AppRootState, Array<TodolistDomainType>>(state => state.todolists)\r\n\r\n\r\n\r\n    const changeFilter=useCallback((todolistId: string, value: FilterValuesType)=> {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    },[dispatch])\r\n\r\n    const removeTodolist=useCallback((id: string)=> {\r\n        dispatch(deleteTodolistTC(id))\r\n        // const action = removeTodolistAC(id)\r\n        // dispatch(action)\r\n\r\n    },[dispatch])\r\n\r\n    const addItem = useCallback((Newtitle: string) => {\r\n        dispatch(createTodolistsTC(Newtitle))\r\n    }, [dispatch])\r\n\r\n    const  changeNameTodo=useCallback(( id: string, newTitle: string)=> {\r\n        const action = changeTodolistTitleTC(id, newTitle)\r\n        dispatch(action)\r\n    },[])\r\n\r\n\r\n    return (<>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItem addItem={addItem}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    return(\r\n                        <Grid item>\r\n                            <Paper style={{padding: '20px'}}>\r\n                                <Todolist\r\n                                    changeNameTodo={changeNameTodo}\r\n                                    key={tl.id}\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    changeFilter={changeFilter}\r\n                                    filter={tl.filter}\r\n                                    removeTodolist={removeTodolist}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>)\r\n                })\r\n            }\r\n        </Grid>\r\n    </>)\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {Button, Container, Toolbar, Typography} from '@material-ui/core';\r\nimport {TaskType} from '../API/todolists-api';\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\nimport {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}